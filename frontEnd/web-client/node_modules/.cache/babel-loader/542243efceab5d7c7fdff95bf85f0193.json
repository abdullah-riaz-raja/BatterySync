{"ast":null,"code":"var _jsxFileName = \"/Users/tahahashmat/Desktop/Team Projects/BatterySync/frontEnd/web-client/src/components/Batteries.js\";\nimport React, { Fragment, useEffect } from 'react'; //import {useBattery} from 'react-use';\n\nconst Batteries = () => {\n  useEffect(() => {\n    fetch('https://us-central1-batterysync-89680.cloudfunctions.net/api/getAllBatteries').then(() => {\n      return console.log(\"dsf\");\n    }).catch(thing => {\n      console.log(thing);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, \"  \");\n};\n\nexport default Batteries; // const batteryState = useBattery();\n// if (!batteryState.isSupported) {\n//     return (\n//       <div>\n//         <strong>Battery sensor</strong>: <span>not supported</span>\n//       </div>\n//     );\n//   }\n//   if (!batteryState.fetched) {\n//     return (\n//       <div>\n//         <strong>Battery sensor</strong>: <span>supported</span> <br />\n//         <strong>Battery state</strong>: <span>fetching</span>\n//       </div>\n//     );\n//   }\n//   return (\n//     <div>\n//       <strong>Battery sensor</strong>:&nbsp;&nbsp; <span>supported</span> <br />\n//       <strong>Battery state</strong>: <span>fetched</span> <br />\n//       <strong>Charge level</strong>:&nbsp;&nbsp; <span>{ (batteryState.level * 100).toFixed(0) }%</span> <br />\n//       <strong>Charging</strong>:&nbsp;&nbsp; <span>{ batteryState.charging ? 'yes' : 'no' }</span> <br />\n//       <strong>Charging time</strong>:&nbsp;&nbsp;\n//       <span>{ batteryState.chargingTime ? batteryState.chargingTime : 'finished' }</span> <br />\n//       <strong>Discharging time</strong>:&nbsp;&nbsp; <span>{ batteryState.dischargingTime }</span>\n//     </div>\n//   )","map":{"version":3,"sources":["/Users/tahahashmat/Desktop/Team Projects/BatterySync/frontEnd/web-client/src/components/Batteries.js"],"names":["React","Fragment","useEffect","Batteries","fetch","then","console","log","catch","thing"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAIhBD,EAAAA,SAAS,CAAC,MAAM;AAEZE,IAAAA,KAAK,CAAC,8EAAD,CAAL,CAAsFC,IAAtF,CAA2F,MAAK;AAChG,aAAOC,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAP;AACH,KAFG,EAEDC,KAFC,CAEMC,KAAD,IAAU;AACfH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAJG;AAMD,GARM,EAQJ,EARI,CAAT;AAYJ,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CApBD;;AAwBA,eAAeN,SAAf,C,CAqBA;AAEC;AACO;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Fragment, useEffect } from 'react'\n//import {useBattery} from 'react-use';\n\nconst Batteries = () => {\n\n\n\n        useEffect(() => {\n\n            fetch('https://us-central1-batterysync-89680.cloudfunctions.net/api/getAllBatteries').then(()=> {\n            return console.log(\"dsf\")\n        }).catch((thing)=> {\n            console.log(thing)\n        })\n\n          }, [])\n        \n    \n\n    return (\n        <h1>  </h1>\n\n    )\n}\n    \n       \n\nexport default Batteries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const batteryState = useBattery();\n\n // if (!batteryState.isSupported) {\n        //     return (\n        //       <div>\n        //         <strong>Battery sensor</strong>: <span>not supported</span>\n        //       </div>\n        //     );\n        //   }\n        \n        //   if (!batteryState.fetched) {\n        //     return (\n        //       <div>\n        //         <strong>Battery sensor</strong>: <span>supported</span> <br />\n        //         <strong>Battery state</strong>: <span>fetching</span>\n        //       </div>\n        //     );\n        //   }\n        \n        //   return (\n        //     <div>\n        //       <strong>Battery sensor</strong>:&nbsp;&nbsp; <span>supported</span> <br />\n        //       <strong>Battery state</strong>: <span>fetched</span> <br />\n        //       <strong>Charge level</strong>:&nbsp;&nbsp; <span>{ (batteryState.level * 100).toFixed(0) }%</span> <br />\n        //       <strong>Charging</strong>:&nbsp;&nbsp; <span>{ batteryState.charging ? 'yes' : 'no' }</span> <br />\n        //       <strong>Charging time</strong>:&nbsp;&nbsp;\n        //       <span>{ batteryState.chargingTime ? batteryState.chargingTime : 'finished' }</span> <br />\n        //       <strong>Discharging time</strong>:&nbsp;&nbsp; <span>{ batteryState.dischargingTime }</span>\n        //     </div>\n        //   )\n    "]},"metadata":{},"sourceType":"module"}